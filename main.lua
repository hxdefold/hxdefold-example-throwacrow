-- Generated by Haxe 4.0.0-rc.1+b5269be62
local _hx_array_mt = {
  __newindex = function(t,k,v)
    local len = t.length
    t.length =  k >= len and (k + 1) or len
    rawset(t,k,v)
  end
}

local function _hx_tab_array(tab,length)
  tab.length = length
  return setmetatable(tab, _hx_array_mt)
end

local function _hx_anon_newindex(t,k,v) t.__fields__[k] = true; rawset(t,k,v); end
local _hx_anon_mt = {__newindex=_hx_anon_newindex}
local function _hx_a(...)
  local __fields__ = {};
  local ret = {__fields__ = __fields__};
  local max = select('#',...);
  local tab = {...};
  local cur = 1;
  while cur < max do
    local v = tab[cur];
    __fields__[v] = true;
    ret[v] = tab[cur+1];
    cur = cur + 2
  end
  return setmetatable(ret, _hx_anon_mt)
end

local function _hx_e()
  return setmetatable({__fields__ = {}}, _hx_anon_mt)
end

local function _hx_o(obj)
  return setmetatable(obj, _hx_anon_mt)
end

local function _hx_new(prototype)
  return setmetatable({__fields__ = {}}, {__newindex=_hx_anon_newindex, __index=prototype})
end

local _hxClasses = {}
local Int = _hx_e();
local Dynamic = _hx_e();
local Float = _hx_e();
local Bool = _hx_e();
local Class = _hx_e();
local Enum = _hx_e();

local _hx_exports = _hx_exports or {}
local Array = _hx_e()
__defold_support_Script = _hx_e()
local Block = _hx_e()
local Camera = _hx_e()
__defold_support_RenderScript = _hx_e()
local CustomRender = _hx_e()
local Debris = _hx_e()
__lua_lib_luautf8_Utf8 = _G.require("lua-utf8")
local Math = _hx_e()
local Messages = _hx_e()
local Parallax = _hx_e()
local String = _hx_e()
local Std = _hx_e()
local TableTools = _hx_e()
local Throwacrow = _hx_e()
__defold_support_GuiScript = _hx_e()
local ThrowacrowGui = _hx_e()
local Wind = _hx_e()
__defold_CameraMessages = _hx_e()
__defold_GoMessages = _hx_e()
__defold_PhysicsMessages = _hx_e()
__defold_RenderMessages = _hx_e()
__defold_SpriteMessages = _hx_e()
__defold_SysMessages = _hx_e()
__defold_types__Message_Message_Impl_ = _hx_e()
__lua_Boot = _hx_e()

local _hx_bind, _hx_bit, _hx_staticToInstance, _hx_funcToField, _hx_maxn, _hx_print, _hx_apply_self, _hx_box_mr, _hx_bit_clamp, _hx_table, _hx_bit_raw
local _hx_pcall_default = {};
local _hx_pcall_break = {};

Array.new = function() 
  local self = _hx_new(Array.prototype)
  Array.super(self)
  return self
end
Array.super = function(self) 
  _hx_tab_array(self, 0);
end
Array.prototype = _hx_a();
Array.prototype.concat = function(self,a) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  local _g3 = 0;
  while (_g3 < a.length) do 
    local i1 = a[_g3];
    _g3 = _g3 + 1;
    _g:push(i1);
  end;
  do return _g end
end
Array.prototype.join = function(self,sep) 
  local tbl = ({});
  local _gthis = self;
  local cur_length = 0;
  local i = _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end});
  while (i:hasNext()) do 
    _G.table.insert(tbl, Std.string(i:next()));
  end;
  do return _G.table.concat(tbl, sep) end
end
Array.prototype.pop = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[self.length - 1];
  self[self.length - 1] = nil;
  self.length = self.length - 1;
  do return ret end
end
Array.prototype.push = function(self,x) 
  self[self.length] = x;
  do return self.length end
end
Array.prototype.reverse = function(self) 
  local tmp;
  local i = 0;
  while (i < Std.int(self.length / 2)) do 
    tmp = self[i];
    self[i] = self[(self.length - i) - 1];
    self[(self.length - i) - 1] = tmp;
    i = i + 1;
  end;
end
Array.prototype.shift = function(self) 
  if (self.length == 0) then 
    do return nil end;
  end;
  local ret = self[0];
  if (self.length == 1) then 
    self[0] = nil;
  else
    if (self.length > 1) then 
      self[0] = self[1];
      _G.table.remove(self, 1);
    end;
  end;
  local tmp = self;
  tmp.length = tmp.length - 1;
  do return ret end
end
Array.prototype.slice = function(self,pos,_end) 
  if ((_end == nil) or (_end > self.length)) then 
    _end = self.length;
  else
    if (_end < 0) then 
      _end = _G.math.fmod((self.length - (_G.math.fmod(-_end, self.length))), self.length);
    end;
  end;
  if (pos < 0) then 
    pos = _G.math.fmod((self.length - (_G.math.fmod(-pos, self.length))), self.length);
  end;
  if ((pos > _end) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  end;
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = _end;
  while (_g < _g1) do 
    _g = _g + 1;
    ret:push(self[_g - 1]);
  end;
  do return ret end
end
Array.prototype.sort = function(self,f) 
  local i = 0;
  local l = self.length;
  while (i < l) do 
    local swap = false;
    local j = 0;
    local max = (l - i) - 1;
    while (j < max) do 
      if (f(self[j], self[j + 1]) > 0) then 
        local tmp = self[j + 1];
        self[j + 1] = self[j];
        self[j] = tmp;
        swap = true;
      end;
      j = j + 1;
    end;
    if (not swap) then 
      break;
    end;
    i = i + 1;
  end;
end
Array.prototype.splice = function(self,pos,len) 
  if ((len < 0) or (pos > self.length)) then 
    do return _hx_tab_array({}, 0) end;
  else
    if (pos < 0) then 
      pos = self.length - (_G.math.fmod(-pos, self.length));
    end;
  end;
  len = Math.min(len, self.length - pos);
  local ret = _hx_tab_array({}, 0);
  local _g = pos;
  local _g1 = pos + len;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    ret:push(self[i]);
    self[i] = self[i + len];
  end;
  local _g2 = pos + len;
  local _g3 = self.length;
  while (_g2 < _g3) do 
    _g2 = _g2 + 1;
    local i1 = _g2 - 1;
    self[i1] = self[i1 + len];
  end;
  local tmp = self;
  tmp.length = tmp.length - len;
  do return ret end
end
Array.prototype.toString = function(self) 
  local tbl = ({});
  _G.table.insert(tbl, "[");
  _G.table.insert(tbl, self:join(","));
  _G.table.insert(tbl, "]");
  do return _G.table.concat(tbl, "") end
end
Array.prototype.unshift = function(self,x) 
  local len = self.length;
  local _g = 0;
  while (_g < len) do 
    _g = _g + 1;
    local i = _g - 1;
    self[len - i] = self[(len - i) - 1];
  end;
  self[0] = x;
end
Array.prototype.insert = function(self,pos,x) 
  if (pos > self.length) then 
    pos = self.length;
  end;
  if (pos < 0) then 
    pos = self.length + pos;
    if (pos < 0) then 
      pos = 0;
    end;
  end;
  local cur_len = self.length;
  while (cur_len > pos) do 
    self[cur_len] = self[cur_len - 1];
    cur_len = cur_len - 1;
  end;
  self[pos] = x;
end
Array.prototype.remove = function(self,x) 
  local _g = 0;
  local _g1 = self.length;
  while (_g < _g1) do 
    _g = _g + 1;
    local i = _g - 1;
    if (self[i] == x) then 
      local _g2 = i;
      local _g11 = self.length - 1;
      while (_g2 < _g11) do 
        _g2 = _g2 + 1;
        local j = _g2 - 1;
        self[j] = self[j + 1];
      end;
      self[self.length - 1] = nil;
      self.length = self.length - 1;
      do return true end;
    end;
  end;
  do return false end
end
Array.prototype.indexOf = function(self,x,fromIndex) 
  local _end = self.length;
  if (fromIndex == nil) then 
    fromIndex = 0;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        fromIndex = 0;
      end;
    end;
  end;
  local _g = fromIndex;
  while (_g < _end) do 
    _g = _g + 1;
    local i = _g - 1;
    if (x == self[i]) then 
      do return i end;
    end;
  end;
  do return -1 end
end
Array.prototype.lastIndexOf = function(self,x,fromIndex) 
  if ((fromIndex == nil) or (fromIndex >= self.length)) then 
    fromIndex = self.length - 1;
  else
    if (fromIndex < 0) then 
      fromIndex = self.length + fromIndex;
      if (fromIndex < 0) then 
        do return -1 end;
      end;
    end;
  end;
  local i = fromIndex;
  while (i >= 0) do 
    if (self[i] == x) then 
      do return i end;
    else
      i = i - 1;
    end;
  end;
  do return -1 end
end
Array.prototype.copy = function(self) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(i);
  end;
  do return _g end
end
Array.prototype.map = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    _g:push(f(i));
  end;
  do return _g end
end
Array.prototype.filter = function(self,f) 
  local _g = _hx_tab_array({}, 0);
  local _g1 = 0;
  local _g2 = self;
  while (_g1 < _g2.length) do 
    local i = _g2[_g1];
    _g1 = _g1 + 1;
    if (f(i)) then 
      _g:push(i);
    end;
  end;
  do return _g end
end
Array.prototype.iterator = function(self) 
  local _gthis = self;
  local cur_length = 0;
  do return _hx_o({__fields__={hasNext=true,next=true},hasNext=function(self) 
    do return cur_length < _gthis.length end;
  end,next=function(self) 
    cur_length = cur_length + 1;
    do return _gthis[cur_length - 1] end;
  end}) end
end
Array.prototype.resize = function(self,len) 
  if (self.length < len) then 
    self.length = len;
  else
    if (self.length > len) then 
      local _g = len;
      local _g1 = self.length;
      while (_g < _g1) do 
        _g = _g + 1;
        self[_g - 1] = nil;
      end;
      self.length = len;
    end;
  end;
end

__defold_support_Script.new = function() 
  local self = _hx_new(__defold_support_Script.prototype)
  __defold_support_Script.super(self)
  return self
end
__defold_support_Script.super = function(self) 
end
__defold_support_Script.prototype = _hx_a();
__defold_support_Script.prototype.init = function(self,_self) 
end
__defold_support_Script.prototype.final_ = function(self,_self) 
end
__defold_support_Script.prototype.update = function(self,_self,dt) 
end
__defold_support_Script.prototype.on_message = function(self,_self,message_id,message,sender) 
end
__defold_support_Script.prototype.on_input = function(self,_self,action_id,action) 
  do return false end
end
__defold_support_Script.prototype.on_reload = function(self,_self) 
end

Block.new = function() 
  local self = _hx_new(Block.prototype)
  Block.super(self)
  return self
end
Block.super = function(self) 
  __defold_support_Script.super(self);
end
_hx_exports["Block"] = Block
Block.prototype = _hx_a();
Block.prototype.init = function(self,_self) 
  _self.mass = _G.go.get("#collisionobject", "mass");
  _self.initial_durability = _hx_funcToField(_self.durability);
  _self.damage_levels = _hx_tab_array({[0]=_self.almost_destroyed, _self.damaged, _self.undamaged}, 3);
end
Block.prototype.on_message = function(self,_self,message_id,message,_) 
  if (message_id == __defold_PhysicsMessages.collision_response) then 
    local other_url = _G.msg.url(nil, message.other_id, "collisionobject");
    local other_velocity = _hx_wrap_if_string_field(_G.vmath,'length')(_G.go.get(other_url, "linear_velocity"));
    local other_mass = _G.go.get(other_url, "mass");
    local velocity = other_velocity;
    if (message.other_group == Block.GROUND) then 
      velocity = _hx_wrap_if_string_field(_G.vmath,'length')(_G.go.get("#collisionobject", "linear_velocity"));
      other_mass = 1000;
    end;
    if (velocity > 20) then 
      _self.durability = _self.durability - (((velocity * 0.01) * _self.mass) / other_mass);
      if (_self.durability <= 0) then 
        _G.go.delete();
        if (_self.debris) then 
          local _g = 0;
          while (_g < 5) do 
            _g = _g + 1;
            local a = _G.go.get_world_position();
            local b = _G.vmath.vector3(_G.math.random(-30, 30), _G.math.random(-30, 30), 0);
            local pos = (a) + (b);
            local rot = _G.vmath.quat_rotation_z(_G.math.rad(_G.math.random(360)));
            local scale = _G.math.random(5, 8) / 10;
            _G.factory.create("#factory", pos, rot, ({}), scale);
          end;
          _self.debris = false;
        end;
      else
        local damage_level = _G.math.floor((3 * _self.durability) / _self.initial_durability);
        _G.msg.post("#sprite", __defold_SpriteMessages.play_animation, _hx_o({__fields__={id=true},id=_self.damage_levels[damage_level]}));
      end;
    end;
  end;
end
Block.__super__ = __defold_support_Script
setmetatable(Block.prototype,{__index=__defold_support_Script.prototype})

Camera.new = function() 
  local self = _hx_new(Camera.prototype)
  Camera.super(self)
  return self
end
Camera.super = function(self) 
  __defold_support_Script.super(self);
end
_hx_exports["Camera"] = Camera
Camera.prototype = _hx_a();
Camera.prototype.init = function(self,_self) 
  _G.msg.post("#camera", __defold_CameraMessages.acquire_camera_focus);
  _self.initial_position = _G.go.get_position();
end
Camera.prototype.final_ = function(self,_) 
  _G.msg.post("#camera", __defold_CameraMessages.release_camera_focus);
end
Camera.prototype.update = function(self,_self,_) 
  local pos = _G.go.get_position();
  pos.y = Math.max(pos.y, _self.initial_position.y);
  _G.go.set_position(pos);
end
Camera.__super__ = __defold_support_Script
setmetatable(Camera.prototype,{__index=__defold_support_Script.prototype})

__defold_support_RenderScript.new = function() 
  local self = _hx_new(__defold_support_RenderScript.prototype)
  __defold_support_RenderScript.super(self)
  return self
end
__defold_support_RenderScript.super = function(self) 
end
__defold_support_RenderScript.prototype = _hx_a();
__defold_support_RenderScript.prototype.init = function(self,_self) 
end
__defold_support_RenderScript.prototype.update = function(self,_self,dt) 
end
__defold_support_RenderScript.prototype.on_message = function(self,_self,message_id,message,sender) 
end

CustomRender.new = function() 
  local self = _hx_new(CustomRender.prototype)
  CustomRender.super(self)
  return self
end
CustomRender.super = function(self) 
  __defold_support_RenderScript.super(self);
end
_hx_exports["CustomRender"] = CustomRender
CustomRender.prototype = _hx_a();
CustomRender.prototype.init = function(self,_self) 
  _self.tile_pred = _G.render.predicate(({"tile"}));
  _self.gui_pred = _G.render.predicate(({"gui"}));
  _self.text_pred = _G.render.predicate(({"text"}));
  _self.particle_pred = _G.render.predicate(({"particle"}));
  _self.clear_color = _G.vmath.vector4(0, 0, 0, 0);
  local tmp = _G.sys.get_config("render.clear_color_red", "0");
  _self.clear_color.x = _G.tonumber(tmp);
  local tmp1 = _G.sys.get_config("render.clear_color_green", "0");
  _self.clear_color.y = _G.tonumber(tmp1);
  local tmp2 = _G.sys.get_config("render.clear_color_blue", "0");
  _self.clear_color.z = _G.tonumber(tmp2);
  local tmp3 = _G.sys.get_config("render.clear_color_alpha", "0");
  _self.clear_color.w = _G.tonumber(tmp3);
  _self.view = _G.vmath.matrix4();
  _self.zoom = 1.0;
end
CustomRender.prototype.update = function(self,_self,_) 
  _G.render.set_depth_mask(true);
  local clearData = ({});
  clearData[_G.render.BUFFER_COLOR_BIT] = _self.clear_color;
  clearData[_G.render.BUFFER_DEPTH_BIT] = 1;
  clearData[_G.render.BUFFER_STENCIL_BIT] = 0;
  _G.render.clear(clearData);
  _G.render.set_viewport(0, 0, _G.render.get_window_width(), _G.render.get_window_height());
  _G.render.set_view(_self.view);
  _G.render.set_depth_mask(false);
  _G.render.disable_state(_G.render.STATE_DEPTH_TEST);
  _G.render.disable_state(_G.render.STATE_STENCIL_TEST);
  _G.render.enable_state(_G.render.STATE_BLEND);
  _G.render.set_blend_func(_G.render.BLEND_SRC_ALPHA, _G.render.BLEND_ONE_MINUS_SRC_ALPHA);
  _G.render.disable_state(_G.render.STATE_CULL_FACE);
  local w = _G.render.get_width();
  local h = _G.render.get_height();
  local dw = w - (w * _self.zoom);
  local dh = h - (h * _self.zoom);
  _G.render.set_projection(_G.vmath.matrix4_orthographic(dw / 2, w - (dw / 2), dh / 2, h - (dh / 2), -1, 1));
  _G.render.draw(_self.tile_pred);
  _G.render.draw(_self.particle_pred);
  _G.render.draw_debug3d();
  _G.render.set_view(_G.vmath.matrix4());
  _G.render.set_projection(_G.vmath.matrix4_orthographic(0, _G.render.get_window_width(), 0, _G.render.get_window_height(), -1, 1));
  _G.render.enable_state(_G.render.STATE_STENCIL_TEST);
  _G.render.draw(_self.gui_pred);
  _G.render.draw(_self.text_pred);
  _G.render.disable_state(_G.render.STATE_STENCIL_TEST);
  _G.render.set_depth_mask(false);
  _G.render.draw_debug2d();
end
CustomRender.prototype.on_message = function(self,_self,message_id,message,_) 
  if (message_id) == __defold_RenderMessages.clear_color then 
    _self.clear_color = _hx_funcToField(message.color);
  elseif (message_id) == __defold_RenderMessages.set_view_projection then 
    _self.view = _hx_funcToField(message.view);
  elseif (message_id) == Messages.set_zoom then 
    _self.zoom = _hx_funcToField(message.zoom); end;
end
CustomRender.__super__ = __defold_support_RenderScript
setmetatable(CustomRender.prototype,{__index=__defold_support_RenderScript.prototype})

Debris.new = function() 
  local self = _hx_new(Debris.prototype)
  Debris.super(self)
  return self
end
Debris.super = function(self) 
  __defold_support_Script.super(self);
end
_hx_exports["Debris"] = Debris
Debris.prototype = _hx_a();
Debris.prototype.init = function(self,_self) 
  _G.msg.post("#sprite", __defold_SpriteMessages.play_animation, _hx_o({__fields__={id=true},id=_self.image}));
  local a = _G.go.get_world_position();
  local b = _G.vmath.vector3(_G.math.random(-10, 10), 150, 0);
  _G.go.animate(".", "position", _G.go.PLAYBACK_ONCE_FORWARD, (a) - (b), _G.go.EASING_INCUBIC, 0.5, 0, function(_,_1,_2) 
    _G.go.delete();
  end);
  _G.go.animate(".", "euler.z", _G.go.PLAYBACK_ONCE_FORWARD, _G.math.random(360), _G.go.EASING_INCUBIC, 0.5);
end
Debris.__super__ = __defold_support_Script
setmetatable(Debris.prototype,{__index=__defold_support_Script.prototype})

Math.new = {}
Math.isNaN = function(f) 
  do return f ~= f end;
end
Math.isFinite = function(f) 
  if (f > -_G.math.huge) then 
    do return f < _G.math.huge end;
  else
    do return false end;
  end;
end
Math.max = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.max(a, b) end;
  end;
end
Math.min = function(a,b) 
  if (Math.isNaN(a) or Math.isNaN(b)) then 
    do return (0/0) end;
  else
    do return _G.math.min(a, b) end;
  end;
end

Messages.new = {}

Parallax.new = function() 
  local self = _hx_new(Parallax.prototype)
  Parallax.super(self)
  return self
end
Parallax.super = function(self) 
  __defold_support_Script.super(self);
end
_hx_exports["Parallax"] = Parallax
Parallax.prototype = _hx_a();
Parallax.prototype.init = function(self,_self) 
  _self.initial_camera_position = _G.go.get_position("camera");
  _self.initial_position = _G.go.get_position();
  _self.offset_factor = _self.initial_position.z;
end
Parallax.prototype.update = function(self,_self,_) 
  local camera_position = _G.go.get_position("camera");
  local a = _self.initial_camera_position;
  local diff = (a) - (camera_position);
  diff.y = diff.y * 0.25;
  diff.z = 0;
  local a1 = _self.initial_position;
  local b = _self.offset_factor;
  local b1 = (diff) * (b);
  _G.go.set_position((a1) + (b1));
end
Parallax.__super__ = __defold_support_Script
setmetatable(Parallax.prototype,{__index=__defold_support_Script.prototype})

String.new = function(string) 
  local self = _hx_new(String.prototype)
  String.super(self,string)
  self = string
  return self
end
String.super = function(self,string) 
end
String.__index = function(s,k) 
  if (k == "length") then 
    do return __lua_lib_luautf8_Utf8.len(s) end;
  else
    local o = String.prototype;
    local field = k;
    if ((function() 
      local _hx_1
      if ((_G.type(o) == "string") and ((String.prototype[field] ~= nil) or (field == "length"))) then 
      _hx_1 = true; elseif (o.__fields__ ~= nil) then 
      _hx_1 = o.__fields__[field] ~= nil; else 
      _hx_1 = o[field] ~= nil; end
      return _hx_1
    end )()) then 
      do return String.prototype[k] end;
    else
      if (String.__oldindex ~= nil) then 
        if (_G.type(String.__oldindex) == "function") then 
          do return String.__oldindex(s, k) end;
        else
          if (_G.type(String.__oldindex) == "table") then 
            do return String.__oldindex[k] end;
          end;
        end;
        do return nil end;
      else
        do return nil end;
      end;
    end;
  end;
end
String.fromCharCode = function(code) 
  do return __lua_lib_luautf8_Utf8.char(code) end;
end
String.prototype = _hx_a();
String.prototype.toUpperCase = function(self) 
  do return __lua_lib_luautf8_Utf8.upper(self) end
end
String.prototype.toLowerCase = function(self) 
  do return __lua_lib_luautf8_Utf8.lower(self) end
end
String.prototype.indexOf = function(self,str,startIndex) 
  if (startIndex == nil) then 
    startIndex = 1;
  else
    startIndex = startIndex + 1;
  end;
  local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex, true);
  if ((r ~= nil) and (r > 0)) then 
    do return r - 1 end;
  else
    do return -1 end;
  end;
end
String.prototype.lastIndexOf = function(self,str,startIndex) 
  local ret = -1;
  if (startIndex == nil) then 
    startIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  while (true) do 
    local startIndex1 = ret + 1;
    if (startIndex1 == nil) then 
      startIndex1 = 1;
    else
      startIndex1 = startIndex1 + 1;
    end;
    local r = __lua_lib_luautf8_Utf8.find(self, str, startIndex1, true);
    local p = (function() 
      local _hx_1
      if ((r ~= nil) and (r > 0)) then 
      _hx_1 = r - 1; else 
      _hx_1 = -1; end
      return _hx_1
    end )();
    if ((p == -1) or (p > startIndex)) then 
      break;
    end;
    ret = p;
  end;
  do return ret end
end
String.prototype.split = function(self,delimiter) 
  local idx = 1;
  local ret = _hx_tab_array({}, 0);
  while (idx ~= nil) do 
    local newidx = 0;
    if (__lua_lib_luautf8_Utf8.len(delimiter) > 0) then 
      newidx = __lua_lib_luautf8_Utf8.find(self, delimiter, idx, true);
    else
      if (idx >= __lua_lib_luautf8_Utf8.len(self)) then 
        newidx = nil;
      else
        newidx = idx + 1;
      end;
    end;
    if (newidx ~= nil) then 
      ret:push(__lua_lib_luautf8_Utf8.sub(self, idx, newidx - 1));
      idx = newidx + __lua_lib_luautf8_Utf8.len(delimiter);
    else
      ret:push(__lua_lib_luautf8_Utf8.sub(self, idx, __lua_lib_luautf8_Utf8.len(self)));
      idx = nil;
    end;
  end;
  do return ret end
end
String.prototype.toString = function(self) 
  do return self end
end
String.prototype.substring = function(self,startIndex,endIndex) 
  if (endIndex == nil) then 
    endIndex = __lua_lib_luautf8_Utf8.len(self);
  end;
  if (endIndex < 0) then 
    endIndex = 0;
  end;
  if (startIndex < 0) then 
    startIndex = 0;
  end;
  if (endIndex < startIndex) then 
    do return __lua_lib_luautf8_Utf8.sub(self, endIndex + 1, startIndex) end;
  else
    do return __lua_lib_luautf8_Utf8.sub(self, startIndex + 1, endIndex) end;
  end;
end
String.prototype.charAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.sub(self, index + 1, index + 1) end
end
String.prototype.charCodeAt = function(self,index) 
  do return __lua_lib_luautf8_Utf8.byte(self, index + 1) end
end
String.prototype.substr = function(self,pos,len) 
  if ((len == nil) or (len > (pos + __lua_lib_luautf8_Utf8.len(self)))) then 
    len = __lua_lib_luautf8_Utf8.len(self);
  else
    if (len < 0) then 
      len = __lua_lib_luautf8_Utf8.len(self) + len;
    end;
  end;
  if (pos < 0) then 
    pos = __lua_lib_luautf8_Utf8.len(self) + pos;
  end;
  if (pos < 0) then 
    pos = 0;
  end;
  do return __lua_lib_luautf8_Utf8.sub(self, pos + 1, pos + len) end
end

Std.new = {}
Std.string = function(s) 
  do return __lua_Boot.__string_rec(s) end;
end
Std.int = function(x) 
  if (not Math.isFinite(x) or Math.isNaN(x)) then 
    do return 0 end;
  else
    do return _hx_bit_clamp(x) end;
  end;
end

TableTools.new = {}
TableTools.get = function(table,k) 
  do return table[k] end;
end
TableTools.set = function(table,k,v) 
  table[k] = v;
end

Throwacrow.new = function() 
  local self = _hx_new(Throwacrow.prototype)
  Throwacrow.super(self)
  return self
end
Throwacrow.super = function(self) 
  __defold_support_Script.super(self);
end
_hx_exports["Throwacrow"] = Throwacrow
Throwacrow.prototype = _hx_a();
Throwacrow.prototype.init = function(self,_self) 
  _G.msg.post(".", __defold_GoMessages.acquire_input_focus);
  _G.msg.post("camera", __defold_CameraMessages.acquire_camera_focus);
  _G.msg.post("#collisionobject", __defold_GoMessages.disable);
  _self.initial_position = _G.go.get_position();
  _self.initial_rotation = _G.go.get_rotation();
  local a = _G.go.get_world_position();
  local b = _G.go.get_world_position("camera");
  _self.camera_offset = (a) - (b);
  _self.camera_target = _G.go.get_position("camera");
  _self.camera_zoom = 1;
  _self.flinging = false;
  _self.aiming = false;
  _self.panning = false;
  _self.idle_frames = 0;
end
Throwacrow.prototype.final_ = function(self,_) 
  _G.msg.post(".", __defold_GoMessages.release_input_focus);
  _G.msg.post("camera", __defold_CameraMessages.release_camera_focus);
end
Throwacrow.prototype.update = function(self,_self,_) 
  _G.msg.post("@render:", __defold_RenderMessages.clear_color, _hx_o({__fields__={color=true},color=Throwacrow.BG_COLOR}));
  _G.msg.post("@render:", __defold_RenderMessages.draw_text, _hx_o({__fields__={text=true,position=true},text="Click and drag to fling",position=_G.vmath.vector3(20, 40, 0)}));
  if (_self.flinging) then 
    local a = _G.go.get_position();
    local b = _self.camera_offset;
    _self.camera_target = (a) - (b);
  end;
  local target_zoom = Math.max(1, Math.min(1.5, _G.math.sqrt(_G.go.get_position().x / _self.initial_position.x)));
  _self.camera_zoom = _self.camera_zoom + ((target_zoom - _self.camera_zoom) * 0.05);
  _G.go.set_position(_G.vmath.lerp(0.1, _G.go.get_position("camera"), _self.camera_target), "camera");
  _G.msg.post("@render:", Messages.set_zoom, _hx_o({__fields__={zoom=true},zoom=_self.camera_zoom}));
  if (_self.flinging) then 
    local linear_velocity = _G.go.get("#collisionobject", "linear_velocity");
    local angular_velocity = _G.go.get("#collisionobject", "angular_velocity");
    if ((_hx_wrap_if_string_field(_G.vmath,'length')(linear_velocity) < 5) and (_hx_wrap_if_string_field(_G.vmath,'length')(angular_velocity) < 5)) then 
      _self.idle_frames = _self.idle_frames + 1;
      if (_self.idle_frames > 60) then 
        _G.msg.post("#collisionobject", __defold_GoMessages.disable);
        _G.msg.post(".", __defold_GoMessages.acquire_input_focus);
        _G.go.set_position(_self.initial_position);
        _G.go.set_rotation(_self.initial_rotation);
        _self.flinging = false;
        local a1 = _self.initial_position;
        local b1 = _self.camera_offset;
        _self.camera_target = (a1) - (b1);
      end;
    else
      _self.idle_frames = 0;
    end;
  end;
end
Throwacrow.prototype.on_input = function(self,_self,action_id,action) 
  local action_position = _G.vmath.vector3(action.x, action.y, 0);
  if (action_id == _G.hash("touch")) then 
    if (action.pressed) then 
      local b = _G.go.get_world_position("camera");
      local a = (action_position) + (b);
      local b1 = _G.go.get_world_position();
      if (_hx_wrap_if_string_field(_G.vmath,'length')((a) - (b1)) < 50) then 
        _self.aiming = true;
        _self.pressed_position = action_position;
      else
        _self.panning = true;
        _self.pressed_position = action_position;
        _self.pressed_camera_position = _G.go.get_position("camera");
      end;
    else
      if (action.released) then 
        if (_self.aiming) then 
          local a1 = _self.initial_position;
          local b2 = _G.go.get_position();
          local direction = (a1) - (b2);
          _G.msg.post("#collisionobject", __defold_GoMessages.enable);
          local a2 = (direction) * (950);
          local b3 = _G.go.get("#collisionobject", "mass");
          _G.msg.post("#collisionobject", __defold_PhysicsMessages.apply_force, _hx_o({__fields__={force=true,position=true},force=(a2) * (b3),position=_G.go.get_world_position()}));
          _G.msg.post(".", __defold_GoMessages.release_input_focus);
          _self.flinging = true;
          _self.aiming = false;
          _self.idle_frames = 0;
          _self.pressed_position = nil;
        else
          _self.panning = false;
        end;
      end;
    end;
  else
    if ((action_id == _G.hash("toggle_physics_debug")) and action.released) then 
      _G.msg.post("@system:", __defold_SysMessages.toggle_physics_debug);
    else
      if ((action_id == _G.hash("toggle_profiler")) and action.released) then 
        _G.msg.post("@system:", __defold_SysMessages.toggle_profile);
      else
        if (_self.aiming) then 
          local dx = _self.pressed_position.x - action_position.x;
          local dy = _self.pressed_position.y - action_position.y;
          local radians = _G.math.atan2(dy, dx);
          local cos = _G.math.cos(radians);
          local sin = _G.math.sin(radians);
          local distance = _G.math.sqrt((dx * dx) + (dy * dy));
          local max_distance = 120;
          if (distance > max_distance) then 
            dx = cos * max_distance;
            dy = sin * max_distance;
            distance = max_distance;
          end;
          _G.go.set_position(_G.vmath.vector3(_self.initial_position.x - dx, _self.initial_position.y - dy, _self.initial_position.z));
        else
          if (_self.panning) then 
            local a3 = _self.pressed_position;
            local delta = (a3) - (action_position);
            local a4 = _self.pressed_camera_position;
            local pos = (a4) + (delta);
            pos.x = Math.min(4000, Math.max(-4000, pos.x));
            _self.camera_target = pos;
          end;
        end;
      end;
    end;
  end;
  do return false end
end
Throwacrow.__super__ = __defold_support_Script
setmetatable(Throwacrow.prototype,{__index=__defold_support_Script.prototype})

__defold_support_GuiScript.new = function() 
  local self = _hx_new(__defold_support_GuiScript.prototype)
  __defold_support_GuiScript.super(self)
  return self
end
__defold_support_GuiScript.super = function(self) 
end
__defold_support_GuiScript.prototype = _hx_a();
__defold_support_GuiScript.prototype.init = function(self,_self) 
end
__defold_support_GuiScript.prototype.final_ = function(self,_self) 
end
__defold_support_GuiScript.prototype.update = function(self,_self,dt) 
end
__defold_support_GuiScript.prototype.on_message = function(self,_self,message_id,message,sender) 
end
__defold_support_GuiScript.prototype.on_input = function(self,_self,action_id,action) 
  do return false end
end
__defold_support_GuiScript.prototype.on_reload = function(self,_self) 
end

ThrowacrowGui.new = function() 
  local self = _hx_new(ThrowacrowGui.prototype)
  ThrowacrowGui.super(self)
  return self
end
ThrowacrowGui.super = function(self) 
  __defold_support_GuiScript.super(self);
end
_hx_exports["ThrowacrowGui"] = ThrowacrowGui
ThrowacrowGui.prototype = _hx_a();
ThrowacrowGui.__super__ = __defold_support_GuiScript
setmetatable(ThrowacrowGui.prototype,{__index=__defold_support_GuiScript.prototype})

Wind.new = function() 
  local self = _hx_new(Wind.prototype)
  Wind.super(self)
  return self
end
Wind.super = function(self) 
  __defold_support_Script.super(self);
end
_hx_exports["Wind"] = Wind
Wind.prototype = _hx_a();
Wind.prototype.on_message = function(self,_self,message_id,message,_) 
  if (message_id == __defold_PhysicsMessages.collision_response) then 
    _G.msg.post(_G.msg.url(nil, message.other_id, "collisionobject"), __defold_PhysicsMessages.apply_force, _hx_o({__fields__={force=true,position=true},force=_self.strength,position=message.other_position}));
  end;
end
Wind.__super__ = __defold_support_Script
setmetatable(Wind.prototype,{__index=__defold_support_Script.prototype})

__defold_CameraMessages.new = {}

__defold_GoMessages.new = {}

__defold_PhysicsMessages.new = {}

__defold_RenderMessages.new = {}

__defold_SpriteMessages.new = {}

__defold_SysMessages.new = {}

__defold_types__Message_Message_Impl_.new = {}
__defold_types__Message_Message_Impl_._new = function(s) 
  do return _G.hash(s) end;
end

__lua_Boot.new = {}
__lua_Boot.isArray = function(o) 
  if (_G.type(o) == "table") then 
    if ((o.__enum__ == nil) and (_G.getmetatable(o) ~= nil)) then 
      do return _G.getmetatable(o).__index == Array.prototype end;
    else
      do return false end;
    end;
  else
    do return false end;
  end;
end
__lua_Boot.printEnum = function(o,s) 
  if (o.length == 2) then 
    do return o[0] end;
  else
    local str = Std.string(Std.string(o[0])) .. Std.string("(");
    s = Std.string(s) .. Std.string("\t");
    local _g = 2;
    local _g1 = o.length;
    while (_g < _g1) do 
      _g = _g + 1;
      local i = _g - 1;
      if (i ~= 2) then 
        str = Std.string(str) .. Std.string((Std.string(",") .. Std.string(__lua_Boot.__string_rec(o[i], s))));
      else
        str = Std.string(str) .. Std.string(__lua_Boot.__string_rec(o[i], s));
      end;
    end;
    do return Std.string(str) .. Std.string(")") end;
  end;
end
__lua_Boot.printClassRec = function(c,result,s) 
  if (result == nil) then 
    result = "";
  end;
  local f = __lua_Boot.__string_rec;
  for k,v in pairs(c) do if result ~= '' then result = result .. ', ' end result = result .. k .. ':' .. f(v, s.. '	') end;
  do return result end;
end
__lua_Boot.__string_rec = function(o,s) 
  if (s == nil) then 
    s = "";
  end;
  local _g = type(o);
  if (_g) == "boolean" then 
    do return tostring(o) end;
  elseif (_g) == "function" then 
    do return "<function>" end;
  elseif (_g) == "nil" then 
    do return "null" end;
  elseif (_g) == "number" then 
    if (o == _G.math.huge) then 
      do return "Infinity" end;
    else
      if (o == -_G.math.huge) then 
        do return "-Infinity" end;
      else
        if (o == 0) then 
          do return "0" end;
        else
          if (o ~= o) then 
            do return "NaN" end;
          else
            do return tostring(o) end;
          end;
        end;
      end;
    end;
  elseif (_g) == "string" then 
    do return o end;
  elseif (_g) == "table" then 
    if (o.__enum__ ~= nil) then 
      do return __lua_Boot.printEnum(o, s) end;
    else
      if ((_hx_wrap_if_string_field(o,'toString') ~= nil) and not __lua_Boot.isArray(o)) then 
        do return _hx_wrap_if_string_field(o,'toString')(o) end;
      else
        if (__lua_Boot.isArray(o)) then 
          local o2 = o;
          if (__lua_lib_luautf8_Utf8.len(s) > 5) then 
            do return "[...]" end;
          else
            local _g1 = _hx_tab_array({}, 0);
            local _g11 = 0;
            while (_g11 < o2.length) do 
              local i = o2[_g11];
              _g11 = _g11 + 1;
              _g1:push(__lua_Boot.__string_rec(i, Std.string(s) .. Std.string(1)));
            end;
            do return Std.string(Std.string("[") .. Std.string(_g1:join(","))) .. Std.string("]") end;
          end;
        else
          if (o.__class__ ~= nil) then 
            do return Std.string(Std.string("{") .. Std.string(__lua_Boot.printClassRec(o, "", Std.string(s) .. Std.string("\t")))) .. Std.string("}") end;
          else
            local fields = __lua_Boot.fieldIterator(o);
            local buffer = ({});
            local first = true;
            _G.table.insert(buffer, "{ ");
            local f = fields;
            while (f:hasNext()) do 
              local f1 = f:next();
              if (first) then 
                first = false;
              else
                _G.table.insert(buffer, ", ");
              end;
              _G.table.insert(buffer, Std.string(Std.string(Std.string("") .. Std.string(Std.string(f1))) .. Std.string(" : ")) .. Std.string(Std.string(o[f1])));
            end;
            _G.table.insert(buffer, " }");
            do return _G.table.concat(buffer, "") end;
          end;
        end;
      end;
    end;
  elseif (_g) == "thread" then 
    do return "<thread>" end;
  elseif (_g) == "userdata" then 
    local mt = _G.getmetatable(o);
    if ((mt ~= nil) and (mt.__tostring ~= nil)) then 
      do return _G.tostring(o) end;
    else
      do return "<userdata>" end;
    end;else
  _G.error("Unknown Lua type",0); end;
end
__lua_Boot.fieldIterator = function(o) 
  if (_G.type(o) ~= "table") then 
    do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
      do return nil end;
    end,hasNext=function(self) 
      do return false end;
    end}) end;
  end;
  local tbl = (function() 
    local _hx_1
    if (o.__fields__ ~= nil) then 
    _hx_1 = o.__fields__; else 
    _hx_1 = o; end
    return _hx_1
  end )();
  local cur = _G.pairs(tbl);
  local next_valid = function(tbl1,val) 
    while (__lua_Boot.hiddenFields[val] ~= nil) do 
      val = cur(tbl1, val);
    end;
    do return val end;
  end;
  local cur_val = next_valid(tbl, cur(tbl, nil));
  do return _hx_o({__fields__={next=true,hasNext=true},next=function(self) 
    local ret = cur_val;
    cur_val = next_valid(tbl, cur(tbl, cur_val));
    do return ret end;
  end,hasNext=function(self) 
    do return cur_val ~= nil end;
  end}) end;
end
_hx_bit_clamp = function(v) 
  if v <= 2147483647 and v >= -2147483648 then
    if v > 0 then return _G.math.floor(v)
    else return _G.math.ceil(v)
    end
  end
  if v > 2251798999999999 then v = v*2 end;
  if (v ~= v or math.abs(v) == _G.math.huge) then return nil end
  return _hx_bit.band(v, 2147483647 ) - math.abs(_hx_bit.band(v, 2147483648))
end
pcall(require, 'bit')
if bit then
  _hx_bit = bit
else
  local _hx_bit_raw = _G.require('bit32')
  _hx_bit = setmetatable({}, { __index = _hx_bit_raw });
  _hx_bit.bnot = function(...) return _hx_bit_clamp(_hx_bit_raw.bnot(...)) end;
  _hx_bit.bxor = function(...) return _hx_bit_clamp(_hx_bit_raw.bxor(...)) end;
end
_hx_array_mt.__index = Array.prototype

local _hx_static_init = function()
  Block.GROUND = _G.hash("ground");
  Messages.set_zoom = _G.hash("set_zoom");
  Throwacrow.BG_COLOR = _G.vmath.vector4(0.83529411764705885, 0.92941176470588238, 0.96470588235294119, 1);
  __defold_CameraMessages.acquire_camera_focus = _G.hash("acquire_camera_focus");
  __defold_CameraMessages.release_camera_focus = _G.hash("release_camera_focus");
  __defold_CameraMessages.set_camera = _G.hash("set_camera");
  __defold_GoMessages.acquire_input_focus = _G.hash("acquire_input_focus");
  __defold_GoMessages.disable = _G.hash("disable");
  __defold_GoMessages.enable = _G.hash("enable");
  __defold_GoMessages.release_input_focus = _G.hash("release_input_focus");
  __defold_GoMessages.set_parent = _G.hash("set_parent");
  __defold_PhysicsMessages.apply_force = _G.hash("apply_force");
  __defold_PhysicsMessages.collision_response = _G.hash("collision_response");
  __defold_PhysicsMessages.contact_point_response = _G.hash("contact_point_response");
  __defold_PhysicsMessages.ray_cast_missed = _G.hash("ray_cast_missed");
  __defold_PhysicsMessages.ray_cast_response = _G.hash("ray_cast_response");
  __defold_PhysicsMessages.request_velocity = _G.hash("request_velocity");
  __defold_PhysicsMessages.trigger_response = _G.hash("trigger_response");
  __defold_PhysicsMessages.velocity_response = _G.hash("velocity_response");
  __defold_RenderMessages.clear_color = _G.hash("clear_color");
  __defold_RenderMessages.draw_line = _G.hash("draw_line");
  __defold_RenderMessages.draw_text = _G.hash("draw_text");
  __defold_RenderMessages.window_resized = _G.hash("window_resized");
  __defold_RenderMessages.set_view_projection = _G.hash("set_view_projection");
  __defold_SpriteMessages.animation_done = _G.hash("animation_done");
  __defold_SpriteMessages.play_animation = _G.hash("play_animation");
  __defold_SysMessages.exit = _G.hash("exit");
  __defold_SysMessages.reboot = _G.hash("reboot");
  __defold_SysMessages.set_update_frequency = _G.hash("set_update_frequency");
  __defold_SysMessages.set_vsync = _G.hash("set_vsync");
  __defold_SysMessages.start_record = _G.hash("start_record");
  __defold_SysMessages.stop_record = _G.hash("stop_record");
  __defold_SysMessages.toggle_physics_debug = _G.hash("toggle_physics_debug");
  __defold_SysMessages.toggle_profile = _G.hash("toggle_profile");
  __lua_Boot.hiddenFields = {__id__=true, hx__closures=true, super=true, prototype=true, __fields__=true, __ifields__=true, __class__=true, __properties__=true}
  
end

_hx_funcToField = function(f)
  if type(f) == 'function' then 
    return function(self,...) 
      return f(...) 
    end
  else 
    return f
  end
end
_hx_wrap_if_string_field = function(o, fld)
  if _G.type(o) == 'string' then
    if fld == 'length' then
      return _G.string.len(o)
    else
      return String.prototype[fld]
    end
  else
    return o[fld]
  end
end
_hx_static_init();
return _hx_exports
